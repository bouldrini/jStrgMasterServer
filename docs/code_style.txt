//--------------------------------------------------------------------------------------------------------------------
// GENERAL LANGUAGE IS ENGLISH
//--------------------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------------------
// EACH COMMENT LINE STARTS WITH A //
//--------------------------------------------------------------------------------------------------------------------

// my comment to describe what's going on

//--------------------------------------------------------------------------------------------------------------------
// EACH CLASSNAME IS CAMELCASE AND PREFIXED WITH A CAPTIAL TYPE IDENTIFIER
//--------------------------------------------------------------------------------------------------------------------

class CMyPersonalClassname

//--------------------------------------------------------------------------------------------------------------------
// EACH STRUCTURE IS CAMELCASE AND PREFIXED WITH A CAPITAL TYPE IDENTIFIER
//--------------------------------------------------------------------------------------------------------------------

struct SMyStruct {
	int my_attribute;
}

// SAME APPLIES FOR STL CONTAINERS

//--------------------------------------------------------------------------------------------------------------------
// EACH CLASS ATTRIBUTE IS PREFIXED WITH 'm_'
//--------------------------------------------------------------------------------------------------------------------

class CMyPersonalClassname{
	public:
		int m_lvl;
}

//--------------------------------------------------------------------------------------------------------------------
// CLASS SECTION (PRIVATE, PROTECTED, PUBLIC) IS INDENTED
//--------------------------------------------------------------------------------------------------------------------

class CMyPersonalClassname{
	public:
		int m_lvl;

	private:
		int m_mana;

	protected:
		int m_atk_dmg
}

//--------------------------------------------------------------------------------------------------------------------
// EACH VARIABLE IS LOWERCASE AND PARAMETERIZED
//--------------------------------------------------------------------------------------------------------------------

int my_descriptional_variable;

//--------------------------------------------------------------------------------------------------------------------
// EACH CLASS IS SEPERATED IN THE CLASSES PACKAGE
//--------------------------------------------------------------------------------------------------------------------

import classes.my_class

//--------------------------------------------------------------------------------------------------------------------
// FUNCTION NAMES ARE LOWERCASE AND PARAMETERIZED. FUNCTION NAMES ARE DESCRIPTIVE FOR ITS FUNCTIONALITY
// INITIAL CURVED BRACE USES SAME LINE AS FUNCTION NAME
// PASSED IN PARAMETERS ARE PREFIXED WITH A '_'
//--------------------------------------------------------------------------------------------------------------------

function my_descriptional_function(int _my_param){
	...
}

//--------------------------------------------------------------------------------------------------------------------
// CONSTANT VARIABLE AND MAKROS ARE ALL CAPITAL AND PARAMETERIZED
//--------------------------------------------------------------------------------------------------------------------

#define MY_DEFINED_MAKRO = 20;
const float EARTH_GRAVITY = 9.82;

//--------------------------------------------------------------------------------------------------------------------
// INCLUDES ARE SEPERATED IN INTERNAL AND EXTERNAL REQUIREMENTS
//--------------------------------------------------------------------------------------------------------------------

// external requirements
#include <iostream>
#include "stdio.h"
#include <algorithm>
#include <math.h>

// internal requirements
#include "ConsoleGraphic.h"
#include "ASCII.h"

//--------------------------------------------------------------------------------------------------------------------
// CONDITIONPARTS ARE SEPERATED BY ONE WHITESPACE
//--------------------------------------------------------------------------------------------------------------------

if (conditionpart1 == conditionpart2) {
	
}

//--------------------------------------------------------------------------------------------------------------------
// FOR LOOP CONDITIONS ARE SEPERATED BY ONE WHITESPACE
//--------------------------------------------------------------------------------------------------------------------

for (int i = 0; i < 10; i++) {
	
}

//--------------------------------------------------------------------------------------------------------------------
// WHILE LOOP CONDITIONS ARE SEPERATED BY ONE WHITESPACE
//--------------------------------------------------------------------------------------------------------------------

while (condition != my_expected_result) {
	
}

//--------------------------------------------------------------------------------------------------------------------
// DO WHILE LOOP CONDITIONS ARE SEPERATED BY ONE WHITESPACE
//--------------------------------------------------------------------------------------------------------------------

do {
	
} while (condition != my_expected_result)
